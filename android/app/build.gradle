plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def flutterCompileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (flutterCompileSdkVersion == null) {
    flutterCompileSdkVersion = '34'
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '23'
}

def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = '33'
}

def betaKeystoreProperties = new Properties()
def betaKeystorePropertiesFile = rootProject.file('beta.key.properties')
if (betaKeystorePropertiesFile.exists()) {
    betaKeystoreProperties.load(new FileInputStream(betaKeystorePropertiesFile))
}

def liveKeystoreProperties = new Properties()
def liveKeystorePropertiesFile = rootProject.file('live.key.properties')
if (liveKeystorePropertiesFile.exists()) {
    liveKeystoreProperties.load(new FileInputStream(liveKeystorePropertiesFile))
}

//native-change flutter-config
project.ext.envConfigFiles = [
        devdebug: ".env.dev",
        betadebug: ".env.beta",
        livedebug: ".env.live",
        devrelease: ".env.dev",
        betarelease: ".env.beta",
        liverelease: ".env.live"
]
//native-change flutter-config
apply from: project(':flutter_config').projectDir.getPath() + "/dotenv.gradle"

android {

    signingConfigs {
        release_beta {
            keyAlias betaKeystoreProperties['keyAlias']
            keyPassword betaKeystoreProperties['keyPassword']
            storeFile betaKeystoreProperties['storeFile'] ? file(betaKeystoreProperties['storeFile']) : null
            storePassword betaKeystoreProperties['storePassword']
        }
        release_live {
            keyAlias liveKeystoreProperties['keyAlias']
            keyPassword liveKeystoreProperties['keyPassword']
            storeFile liveKeystoreProperties['storeFile'] ? file(liveKeystoreProperties['storeFile']) : null
            storePassword liveKeystoreProperties['storePassword']
        }
    }

    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions += "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationId "com.flutterbase.dev"
            resValue "string", "app_name", "FlutterBase (Dev)"
        }
        beta {
            dimension "flavor-type"
            applicationId "com.flutterbase.beta"
            signingConfig signingConfigs.release_beta
            resValue "string", "app_name", "FlutterBase (Beta)"
        }
        live {
            dimension "flavor-type"
            applicationId "com.flutterbase.live"
            // signingConfig signingConfigs.release_live
            resValue "string", "app_name", "FlutterBase"
        }
    }

    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----


    compileSdkVersion flutterCompileSdkVersion.toInteger()

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId project.env.get("APP_ID")
        minSdkVersion flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterTargetSdkVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        resValue "string", "app_name", project.env.hasProperty("APP_NAME") ? project.env.get("APP_NAME") : "Flutter base"
        resValue "string", "dynamic_link_host", project.env.get("DYNAMIC_LINK_HOST")
        resValue "string", "build_config_package", "com.flutterbase.live"
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation(platform("com.google.firebase:firebase-bom:33.1.2"))
    implementation 'androidx.window:window:1.0.0'
    implementation 'androidx.window:window-java:1.0.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}
